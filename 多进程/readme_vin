多线程编程

进程创建步骤：
1. 导入进程包    import multiprocessing
2. 使用包中的进程类创建进程对象       进程对象 = multiprocessing.Process()
3. 使用进程对象启动进程执行任务       进程对象.start()

获取进程编号
1. 获取当前进程编号
os.getpid()
2. 获取当前父进程编号
os.getppid()

注意点：
1. 主进程默认会等待所有子进程结束后再结束
2. 设置子进程守护主进程：主进程退出后子进程直接销毁，不再执行子进程中的代码


=============================================================================


线程

多线程是python程序中实现多任务的一种方式
进程是分配资源的最小单位
线程是程序执行的最小单位
进程是线程的容器
一个进程中最少有一个线程
同属于一个进程的多个线程共享进程所拥有的全部资源
在进程中会默认有一个线程用来执行程序，这个线程称为主线程

使用多线程实现多任务的步骤：
1. 导入线程模块   import threading
2. 通过线程类创建线程对象      线程对象 = threading.Thread(target = 任务名)
3. 启动线程执行任务         线程对象.start()

主线程和子线程的执行顺序：
1. 主线程会等待所有子线程执行结束再结束
2. 设置子线程守护主线程，主线程推出后子线程直接销毁，不再执行子线程中的代码

线程之间的执行顺序：
1. 线程的执行由CPU调度
2. 线程间的执行是无序的

获取当前线程的信息：
current_thread = threading.current_thread()
print(current_thread)

线程创建默认名格式为 thread-N, N表示是第几个创建的线程